CREATE OR REPLACE FUNCTION users_notify_event() RETURNS trigger AS $$
DECLARE
    payload JSON;
BEGIN
    IF TG_OP = 'DELETE' THEN
        payload = json_build_object(
            'table', TG_TABLE_NAME,
            'operation', TG_OP,
            'data', row_to_json(OLD)
        );
    ELSE
        payload = json_build_object(
            'table', TG_TABLE_NAME,
            'operation', TG_OP,
            'data', row_to_json(NEW)
        );
    END IF;
    PERFORM pg_notify(CAST('table_update' AS TEXT), payload::TEXT);

    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER users_update_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON users
    FOR EACH ROW
    EXECUTE PROCEDURE users_notify_event();



CREATE OR REPLACE FUNCTION categories_notify_event() RETURNS trigger AS $$
DECLARE
    payload JSON;
BEGIN
    IF TG_OP = 'DELETE' THEN
        payload = json_build_object(
            'table', TG_TABLE_NAME,
            'operation', TG_OP,
            'data', row_to_json(OLD)
        );
    ELSE
        payload = json_build_object(
            'table', TG_TABLE_NAME,
            'operation', TG_OP,
            'data', row_to_json(NEW)
        );
    END IF;
    PERFORM pg_notify(CAST('table_update' AS TEXT), payload::TEXT);

    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER categories_update_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON categories
    FOR EACH ROW
    EXECUTE PROCEDURE categories_notify_event();





DROP TRIGGER skus_update_trigger ON skus;
DROP FUNCTION skus_notify_event();

DROP TRIGGER categories_update_trigger ON categories;
DROP FUNCTION categories_notify_event();

DROP TRIGGER fields_update_trigger ON fields;
DROP FUNCTION fields_notify_event();

DROP TRIGGER stocks_update_trigger ON stocks;
DROP FUNCTION stocks_notify_event();

DROP TRIGGER items_update_trigger ON items;
DROP FUNCTION items_notify_event();

DROP TRIGGER containers_update_trigger ON containers;
DROP FUNCTION containers_notify_event();

DROP TRIGGER warehouse_locations_update_trigger ON warehouse_locations;
DROP FUNCTION warehouse_locations_notify_event();

DROP TRIGGER users_update_trigger ON users;
DROP FUNCTION users_notify_event();

DROP TRIGGER laptop_specifications_update_trigger ON laptop_specifications;
DROP FUNCTION laptop_specifications_notify_event();

DROP TRIGGER tft_specifications_update_trigger ON tft_specifications;
DROP FUNCTION tft_specifications_notify_event();

DROP TRIGGER docking_station_specifications_update_trigger ON docking_station_specifications;
DROP FUNCTION docking_station_specifications_notify_event();
